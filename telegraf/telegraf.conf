# Telegraf Configuration

# Global settings
[agent]
  interval = "10s"          # Collect data every 10 seconds
  flush_interval = "10s"    # Flush data to InfluxDB every 10 seconds
  metric_batch_size = 1000  # Batch up to 1000 metrics before writing
  metric_buffer_limit = 10000  # Buffer up to 10000 metrics in memory

# MQTT Input Plugin
[[inputs.mqtt_consumer]]
  servers = ["tcp://mosquitto:1883"]  # MQTT broker (Mosquitto container)
  topics = ["smoke_detection"]         # Subscribe to smoke_detector topic
  qos = 0                            # At most once delivery (sufficient for this use case)
  # connection_timeout = "30s"         # Timeout for MQTT connection
  max_undelivered_messages = 1000    # Buffer up to 1000 messages
  data_format = "json"               # Parse incoming messages as JSON
  json_strict = false                # Allow non-strict JSON parsing
  json_time_key = "timestamp"        # Use 'timestamp' field as InfluxDB timestamp
  json_time_format = "unix"
  topic_tag = "topic"                # Store the MQTT topic as a tag (optional, for debugging)
  [inputs.mqtt_consumer.tags]
    source = "mqtt_publisher"

# InfluxDB Output Plugin
[[outputs.influxdb_v2]]
  urls = ["${INFLUXDB_URL}"]
  token = "$INFLUXDB_TOKEN"
  organization = "$INFLUXDB_ORG"
  bucket = "$INFLUXDB_BUCKET"
  timeout = "5s"

[[outputs.file]]
  files = ["stdout"]
  data_format = "json"

# # Processor to rename measurement
# [[processors.rename]]
#   [[processors.rename.replace]]
#     measurement = "mqtt_consumer"     # Default measurement name
#     dest = "smoke_detector_metrics"   # Rename to meaningful name

# # Map fields to InfluxDB tags and fields
# [[processors.converter]]
#   [processors.converter.fields]
#     tag = ["Fire Alarm"]              # Low-cardinality field as tag
#     float = ["Temperature[C]", "Humidity[%]", "TVOC[ppb]", "eCO2[ppm]", "Raw H2", "Raw Ethanol", "Pressure[hPa]", "PM1.0", "PM2.5", "NC0.5", "NC1.0", "NC2.5"]
#     integer = ["CNT"]